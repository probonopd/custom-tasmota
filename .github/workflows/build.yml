name: Build

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PlatformIO and jq
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip jq
          pip3 install platformio

      - name: Git clone Tasmota
        run: |
          git clone -b 'v14.4.1' --single-branch --depth 1 https://github.com/arendst/Tasmota

      - name: Copy user_config_override.h and change xdrv_01_9_webserver.ino
        run: |
          sed -i -e 's|http://ota.tasmota.com/tasmota/release/|https://github.com/${GITHUB_REPOSITORY}/releases/download/continuous/|g' Tasmota/platformio_tasmota_env.ini
          sed -i -e 's|http://ota.tasmota.com/tasmota/release/|https://github.com/${GITHUB_REPOSITORY}/releases/download/continuous/|g' Tasmota/platformio_tasmota_env32.ini
          cp user_config_override.h Tasmota/tasmota/user_config_override.h
          sed -i -e "s|Theo Arends</a>|Theo Arends</a><br><a href=\'https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}\'>https://github.com/${GITHUB_REPOSITORY}</a>|g" Tasmota/tasmota/tasmota_xdrv_driver/xdrv_01_9_webserver.ino
          sed -i -e "s|https://bit.ly/tasmota|https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}|g" Tasmota/tasmota/tasmota_xdrv_driver/xdrv_01_9_webserver.ino
      - name: Build Tasmota variants
        run: |
          cd Tasmota
          variants=("tasmota" "tasmota-4M" "tasmota32s2cdc" "tasmota32s3") # tasmota32c2 no i2s?
          mkdir -p ../out/
          for variant in "${variants[@]}"; do
            platformio run -e "$variant"
            mv .pio/build/*/firmware.bin "../out/${variant}.bin"
          done

      - name: Check for existing release
        id: check_release
        run: |
          release=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/continuous")
          echo "exists=$(echo $release | jq -r '.id // null')" >> $GITHUB_ENV

      - name: Delete existing release
        if: env.exists != 'null'
        run: |
          curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/${{ env.exists }}"

      - name: Create new release
        id: create_release
        run: |
          response=$(curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"tag_name": "continuous", "name": "Continuous Release", "body": "New build of Tasmota variants."}' \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          echo "release_id=$(echo $response | jq '.id')" >> $GITHUB_ENV

      - name: Upload artifacts to release
        run: |
          for variant in tasmota tasmota-4M tasmota32s2cdc tasmota32s3; do
            curl -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"out/${variant}.bin" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ env.release_id }}/assets?name=${variant}.bin"
          done
